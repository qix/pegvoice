{
  function i3(command) {
    return {
      handler: 'i3',
      command,
    };
  }
  function key(name) {
    return {
      handler: 'key',
      key: name,
    };
  }
  function extractList(list, index) {
    return list.map(element => element[index]);
  }
}

slap => key('enter');

tab :number => key(`ctrl-${number}`);

window ...{
  float => i3('floating enable');
  :direction => i3(`focus ${direction}`);
  move :i3screen => i3(`move container to workspace ${i3screen}`);
}

screen :i3screen => i3(`workspace ${i3screen}`);

i three ...{
  screen :i3screen => i3(`workspace ${i3screen}`);
}

key k:keyName => key(k);

alt k:keyName => key(`alt-${k}`);
control alt k:keyName => key(`ctrl-alt-${k}`);
control k:keyName => key(`ctrl-${k}`);
shift k:keyName => key(`shift-${k}`);

type :keyNames => {
  handler: 'multi',
  commands: keyNames.map(name => key(name)),
};

words :string => {
  handler: 'type',
  string,
};


/***
  DEFINITIONS
***/

direction = (up / down / left / right);
i3screen = number;

keyNames = head:keyName _ "."? _ tail:(keyName _ "."? _ )* {
  return [head, ...extractList(tail, 0)];
}

keyName "<key>" = name:(
  enter /
  escape /
  space /
  backspace /
  tab /
  direction /
  letter /
  digit
) {
  return name;
}

spell up;
spell down;
spell left;
spell right;
spell tab;
spell space;
spell key / he;
spell backspace / back space / that space;
spell enter / inter / into;
spell escape / escaped;
spell window / windows;

number = digit

letter = (
    "a" / "b" / "c" / "d" / "e" / "f" / "g" / "h" / "i" /
    "j" / "k" / "l" / "m" / "n" / "o" / "p" / "q" / "r" /
    "s" / "t" / "u" / "v" / "w" / "x" / "y" / "z"
);

digit = word:(
  "one" / "two" / "three" / "four" / "five" /
  "six" / "seven" / "eight" / "nine" / "naught" / "zero" /
  "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9" / "0"
) {
  return {
    "one": 1,
    "two": 2,
    "three": 3,
    "four": 4,
    "five": 5,
    "six": 6,
    "seven": 7,
    "eight": 8,
    "nine": 9,
    "zero": 0,
    "naught": 0,
  }[word] || word;
}

string = chars:(.*) {
  return chars.join('');
}

WhiteSpace "whitespace"
  = "\t"
  / "\n"
  / "\r"
  / " "

_ "whitespace" = (WhiteSpace)*;

/*
c_the = "the" _ command:start {
  return command;
}
*/

