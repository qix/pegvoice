{
  function noop() {
    return {
      handler: 'noop',
    };
  }
  function i3(command) {
    return {
      handler: 'i3',
      command,
    };
  }
  function repeat(count, command) {
    return {
      handler: 'repeat',
      count,
      command,
    };
  }
  function mode(name) {
    return {
      handler: 'mode',
      enable: [name],
    };
  }
  function modeOff(name) {
    return {
      handler: 'mode',
      disable: [name],
    };
  }
  function multi(...commands) {
    if (commands.length === 0) {
      return noop();
    } else if (commands.length === 1) {
      return commands[0];
    }
    return {
      handler: 'multi',
      commands,
    };
  }

  function key(name) {
    return {
      handler: 'key',
      key: name,
    };
  }
  function type(keys) {
    const names = {'\n': 'enter'};
    if (typeof keys === 'string') {
      keys = keys.split('').map(key => {
        return names[key] || key;
      });
    }
    return multi(...keys.map(name => key(name)));
  }
  function typeLine(keys) {
    return multi(type(keys), key('enter'));
  }

  function vimex(command) {
    return escaped(typeLine(`:${command}`));
  }

  function escaped(command) {
    return multi(key('escape'), command);
  }
  function extractList(list, index) {
    return list.map(element => element[index]);
  }
  function extractOptional(optional, index, def=null) {
    return optional ? optional[index] : def;
  }
  function optional(v, def=null) {
    return extractOptional(v, 1, def);
  }
}

wake up => noop();
go to sleep => noop();

page down => key('pagedown');
page up => key('pageup');

move window :direction => i3(`move ${direction}`);

window ...{
  float => i3('floating toggle');
  :direction => i3(`focus ${direction}`);
  move :direction => i3(`move ${direction}`);
  close => i3('kill');
  move screen? :i3screen => i3(`move container to workspace ${i3screen}`);
}
:direction => key(direction);
screen :i3screen => i3(`workspace ${i3screen}`);

open terminal :folder? => i3(`exec gnome-terminal --hide-menubar --working-directory="${optional(folder, '/home/josh')}"`);
open editor :folder? => i3(`exec gvim -c ':NERDTree ${optional(folder, '/home/josh')}'`);

&vim ...{
  open above => type('O');
  open => type('o');
  above => type('O');
  append end => type('A');
  append => type('a');
  insert => multi(type('i'), mode('vim-insert'));

  paste => type('p');
  undo => type('u');
  save exit => vimex('wq');
  save => vimex('w');

  tree :folder => vimex(`NERDTree ${folder}`);

  go to? ...{
    top => type('gg');
    bottom => type('G');
  }

  delete ...{
    line => type('dd');
    dir:vim_direction => type(`d${dir}`);
  }
  yank ...{
    line => type('yy');
    dir:vim_direction => type(`y${dir}`);
  }

  node require :ident => typeLine(`const ${ident} = require('${ident}');`);
  switch buffer => escaped(repeat(2, key('ctrl-w')));
  close buffer => vimex('bd');
  find :code? => escaped(type(`/${optional(code, '')}`));
  next => type('n');
}

redo => key('ctrl-r');

call :ident => multi(type(`${ident}()`), key('left'));
string :keys => type("'" + keys + "'");
console log => type('console.log(');
arrow function => multi(type(' => '), key('shift-['), key('enter'));
arrow => type(' => ');

endvim => noop();

slap it? => key('enter');
enter => key('enter');
escape => key('escape');

&chrome ...{
  tab :number => key(`ctrl-${number}`);
}


:number :direction => repeat(number, key(direction));


i three ...{
  screen :i3screen => i3(`workspace ${i3screen}`);
}

key k:key => key(k);

capital k:key => key(`shift-${k}`);
alt k:key => key(`alt-${k}`);
control alt k:key => key(`ctrl-alt-${k}`);
control k:key => key(`ctrl-${k}`);
shift k:key => key(`shift-${k}`);

type :keys => type(keys);

words :string => {
  handler: 'type',
  string,
};


/***
  DEFINITIONS
***/

_vim_direction = inner:(inner _)? dir:(word / _vim_until) {
  return (inner ? 'i' : '') + ({
    word: 'w',
  }[dir] || dir);
}

_vim_until = until code:_ascii {
  return `t${code}`;
}

_chrome = &{
  return options.mode.has('chrome');
};
_vim = &{
  return options.mode.has('vim');
};
_vim_insert = &{
  return options.mode.has('vim-insert');
};

_folder = voice {
  return "/home/josh/voice-code/pegvoice";
}
_direction = (up / down / left / right);
_i3screen = _number;

_keys = head:_key "."? tail:(_ _key "."?)* {
  return [head, ...extractList(tail, 1)];
}

_code = head:_ident tail:(_ _ident &_)* {
  return [head, ...extractList(tail, 1)].join(' ');
}

_ident = word:_word {
  return word.toLowerCase();
}

_word = [A-Za-z]+ {
  return text();
}

_key "<key>" 
  = enter
  / escape
  / backspace
  / _direction
  / _ascii 

_ascii "<ascii>" = char:(
  space /
  underscore /
  semicolon /
  dash /
  tab /
  _digit /
  _letter
) {
  return {
    underscore: '_',
    space: ' ',
    semicolon: ';',
    tab: '\t',
  }[char] || `${char}`;
}

_letter = capital:(capital _)? letter:([a-zA-Z]) (
  "\\letter\\letter [A-Z]" /
  "\\letter" /
  "\\pronoun" /
  ("\\spelling-letter\\letter " [A-Z]) /
  ("\\spelling-letter\\" [A-Z]) /
  ("\\uppercase-letter\\capital " [A-Z])
)? {
  if (text().includes('uppercase-letter')) {
    capital = true;
  }

  return capital ? letter.toUpperCase() : letter.toLowerCase();
};



_number = _number_hundred;

_number_hundred = hundred:(_number_ten _ "hundred" (_ "and")? _)? ten:_number_ten? {
  let number = 0;
  if (hundred) {
    number += hundred[0] * 100;
  }
  return number + (ten || 0);
}


_number_ten = _number_ten_word / _number_ten_combo / _digit;

_number_ten_word = word:(
    "ten"i / "eleven"i / "twelve"i / "thirteen"i / "fourteen"i / "fifteen"i /
    "sixteen"i / "seventeen"i / "eighteen"i / "nineteen"i
) {
  return {
    "ten": 10,
    "eleven": 11,
    "twelve": 12,
    "thirteen": 13,
    "fourteen": 14,
    "fifteen": 15,
    "sixteen": 16,
    "seventeen": 17,
    "eighteen": 18,
    "nineteen": 19,
  }[word.toLowerCase()];
};

_number_ten_combo = word:(
  "ten"i / "twenty"i / "thirty"i / "fourty"i / "fifty"i /
  "sixty"i / "seventy"i / "eighty"i / "ninety"i
) digit:(_ _digit)? {
  return {
    twenty: 20,
    thirty: 30,
    fourty: 40,
    fifty: 50,
    sixty: 60,
    seventy: 70,
    eighty: 80,
    ninety: 90,
  }[word.toLowerCase()] + (extractOptional(digit, 1) || 0);
}



_digit = word:(
  "one"i / "two"i / "three"i / "four"i / "five"i /
  "six"i / "seven"i / "eight"i / "nine"i / "naught"i / "zero"i /
  "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9" / "0"
) ("\\number" / "\\pronoun")? {
  return {
    "one": 1,
    "two": 2,
    "three": 3,
    "four": 4,
    "five": 5,
    "six": 6,
    "seven": 7,
    "eight": 8,
    "nine": 9,
    "zero": 0,
    "naught": 0,
  }[word.toLowerCase()] || word;
}

_string = chars:(.*) {
  return chars.join('');
}

spell backspace / back space / that space;
spell capital;
spell close / closed;
spell dash / "-";
spell down;
spell enter / inter / into;
spell escape / escaped;
spell inner;
spell key / he;
spell left;
spell right;
spell save / safe;
spell semicolon / ";\\semicolon\\semicolon";
spell space;
spell tab;
spell underscore / "_" / "_\\underscore\\underscore";
spell until;
spell up;
spell window / windows;
spell voice;
spell word;
