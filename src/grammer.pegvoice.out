{

  function noop() {
    return {
      handler: 'noop',
    };
  }
  function i3(command) {
    return {
      handler: 'i3',
      command,
    };
  }
  function repeat(count, command) {
    return {
      handler: 'repeat',
      count,
      command,
    };
  }
  function multi(...commands) {
    if (commands.length === 0) {
      return noop();
    } else if (commands.length === 1) {
      return commands[0];
    }
    return {
      handler: 'multi',
      commands,
    };
  }
  function key(name) {
    return {
      handler: 'key',
      key: name,
    };
  }

  function type(keys) {
    const names = {'\n': 'enter'};
    if (typeof keys === 'string') {
      keys = keys.split('').map(key => {
        return names[key] || key;
      });
    }
    return multi(...keys.map(name => key(name)));
  }
  function extractList(list, index) {
    return list.map(element => element[index]);
  }
  function extractOptional(optional, index) {
    return optional ? optional[index] : null;
  }

}
c_wake_up "wake up" = wake _ up "."? {
return noop();
}
c_go_to_sleep "go to sleep" = go _ to _ sleep "."? {
return noop();
}
c_vim "vim" = vim "."? {
return noop();
}
c_above "above" = above "."? {
return type('O');
}
c_open "open" = open "."? {
return type('o');
}
c_insert "insert" = insert "."? {
return type('i');
}
c_go_top "top" = top "."? {
return type('gg');
}
c_go_bottom "bottom" = bottom "."? {
return type('G');
}
c_go = go _ action:(c_go_top / c_go_bottom) {
  return action;
}
c_delete_line "line" = line "."? {
return type('dd');
}
c_delete = delete _ action:(c_delete_line) {
  return action;
}
c_viminsert "viminsert" = viminsert "."? {
return noop();
}
c_console_log "console log" = console _ log "."? {
return type('console.log(');
}
c_arrow_function "arrow function" = arrow _ function "."? {
return multi(type(' => '), key('shift-['), key('enter'));
}
c_arrow "arrow" = arrow "."? {
return type(' => ');
}
c_call__word = call _ word:_word "."? {
return multi(type(`${word}()`), key('left'));
}
c_string__keys = string _ keys:_keys "."? {
return type("'" + keys + "'");
}
c_endvim "endvim" = endvim "."? {
return noop();
}
c_slap "slap" = slap "."? {
return key('enter');
}
c_enter "enter" = enter "."? {
return key('enter');
}
c_escape "escape" = escape "."? {
return key('escape');
}
c_tab__number = tab _ number:_number "."? {
return key(`ctrl-${number}`);
}
c_window_float "float" = float "."? {
return i3('floating toggle');
}
c_window__direction = direction:_direction "."? {
return i3(`focus ${direction}`);
}
c_window_move_screen__i3screen = move (_ screen)? _ i3screen:_i3screen "."? {
return i3(`move container to workspace ${i3screen}`);
}
c_window = window _ action:(c_window_float / c_window__direction / c_window_move_screen__i3screen) {
  return action;
}
c__direction = direction:_direction "."? {
return key(direction);
}
c__number__direction = number:_number _ direction:_direction "."? {
return repeat(number, key(direction));
}
c_screen__i3screen = screen _ i3screen:_i3screen "."? {
return i3(`workspace ${i3screen}`);
}
c_i_three_screen__i3screen = screen _ i3screen:_i3screen "."? {
return i3(`workspace ${i3screen}`);
}
c_i_three = i _ three _ action:(c_i_three_screen__i3screen) {
  return action;
}
c_key__key = key _ k:_key "."? {
return key(k);
}
c_alt__key = alt _ k:_key "."? {
return key(`alt-${k}`);
}
c_control_alt__key = control _ alt _ k:_key "."? {
return key(`ctrl-alt-${k}`);
}
c_control__key = control _ k:_key "."? {
return key(`ctrl-${k}`);
}
c_shift__key = shift _ k:_key "."? {
return key(`shift-${k}`);
}
c_type__keys = type _ keys:_keys "."? {
return type(keys);
}
c_words__string = words _ string:_string "."? {
return {
  handler: 'type',
  string,
};
}
_direction = (up / down / left / right);
_i3screen = _number;
_keys = head:_key "."? tail:(_ _key "."?)* {
  return [head, ...extractList(tail, 1)];
}

_word = [a-z]+ {
  return text();
}

_key "<key>" = name:(
  enter /
  escape /
  space /
  backspace /
  underscore /
  tab /
  _direction /
  _digit /
  _letter
) {
  return `${name}`;
}

_letter = capital:(capital _)? letter:([a-zA-Z]) (
  "\\letter" /
  "\\pronoun" /
  ("\\spelling-letter\\letter " [A-Z]) /
  ("\\spelling-letter\\" [A-Z]) /
  ("\\uppercase-letter\\capital " [A-Z])
)? {
  if (text().includes('uppercase-letter')) {
    capital = true;
  }

  return capital ? letter.toUpperCase() : letter;
};
_number = _number_hundred;
_number_hundred = hundred:(_number_ten _ "hundred" (_ "and")? _)? ten:_number_ten? {
  let number = 0;
  if (hundred) {
    number += hundred[0] * 100;
  }
  return number + (ten || 0);
}

_number_ten = _number_ten_word / _number_ten_combo / _digit;
_number_ten_word = word:(
    "ten"i / "eleven"i / "twelve"i / "thirteen"i / "fourteen"i / "fifteen"i /
    "sixteen"i / "seventeen"i / "eighteen"i / "nineteen"i
) {
  return {
    "ten": 10,
    "eleven": 11,
    "twelve": 12,
    "thirteen": 13,
    "fourteen": 14,
    "fifteen": 15,
    "sixteen": 16,
    "seventeen": 17,
    "eighteen": 18,
    "nineteen": 19,
  }[word.toLowerCase()];
};
_number_ten_combo = word:(
  "ten"i / "twenty"i / "thirty"i / "fourty"i / "fifty"i /
  "sixty"i / "seventy"i / "eighty"i / "ninety"i
) digit:(_ _digit)? {
  return {
    twenty: 20,
    thirty: 30,
    fourty: 40,
    fifty: 50,
    sixty: 60,
    seventy: 70,
    eighty: 80,
    ninety: 90,
  }[word.toLowerCase()] + (extractOptional(_digit, 1) || 0);
}

_digit = word:(
  "one"i / "two"i / "three"i / "four"i / "five"i /
  "six"i / "seven"i / "eight"i / "nine"i / "naught"i / "zero"i /
  "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9" / "0"
) ("\\number" / "\\pronoun")? {
  return {
    "one": 1,
    "two": 2,
    "three": 3,
    "four": 4,
    "five": 5,
    "six": 6,
    "seven": 7,
    "eight": 8,
    "nine": 9,
    "zero": 0,
    "naught": 0,
  }[word.toLowerCase()] || word;
}

_string = chars:(.*) {
  return chars.join('');
}

up "up" = ("up"i) { return "up" };
down "down" = ("down"i) { return "down" };
left "left" = ("left"i) { return "left" };
right "right" = ("right"i) { return "right" };
tab "tab" = ("tab"i) { return "tab" };
space "space" = ("space"i) { return "space" };
key "key" = ("key"i / "he"i) { return "key" };
backspace "backspace" = ("back space"i / "that space"i / "backspace"i) { return "backspace" };
enter "enter" = ("enter"i / "inter"i / "into"i) { return "enter" };
escape "escape" = ("escaped"i / "escape"i) { return "escape" };
window "window" = ("windows"i / "window"i) { return "window" };
underscore "underscore" = ("_\\underscore\\underscore"i / "underscore"i / "_"i) { return "underscore" };
capital "capital" = ("capital"i) { return "capital" };

wake = "wake"i;
go = "go"i;
to = "to"i;
sleep = "sleep"i;
vim = "vim"i;
above = "above"i;
open = "open"i;
insert = "insert"i;
top = "top"i;
bottom = "bottom"i;
delete = "delete"i;
line = "line"i;
viminsert = "viminsert"i;
console = "console"i;
log = "log"i;
arrow = "arrow"i;
function = "function"i;
call = "call"i;
string = "string"i;
endvim = "endvim"i;
slap = "slap"i;
float = "float"i;
move = "move"i;
screen = "screen"i;
i = "i"i;
three = "three"i;
alt = "alt"i;
control = "control"i;
shift = "shift"i;
type = "type"i;
words = "words"i;

      _ = " Â· ";
      __command__ = c_wake_up / c_go_to_sleep / c_vim / c_above / c_open / c_insert / c_go / c_delete / c_viminsert / c_console_log / c_arrow_function / c_arrow / c_call__word / c_string__keys / c_endvim / c_slap / c_enter / c_escape / c_tab__number / c_window / c__direction / c__number__direction / c_screen__i3screen / c_i_three / c_key__key / c_alt__key / c_control_alt__key / c_control__key / c_shift__key / c_type__keys / c_words__string;
      __grammer__ = head:__command__ tail:(_ __command__)* {
        if (!tail.length) {
          return head;
        }
        return {
          handler: 'multi',
          commands: [head, ...tail.map(match => match[1])],
        };
      }
      